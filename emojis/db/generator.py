from __future__ import annotations

import argparse
import asyncio
import os
from datetime import datetime
import aiofiles
import aiohttp

GEMOJI_RELEASE_URL = "https://api.github.com/repos/github/gemoji/releases"
GEMOJI_JSON_DB_URL = "https://raw.githubusercontent.com/github/gemoji/{tag}/db/emoji.json"


async def get_lastest_release():
    session = aiohttp.ClientSession()
    req = await session.get(GEMOJI_RELEASE_URL)

    data = await req.json()

    latest = data[0]

    return latest["tag_name"], latest["name"]


async def generate(path: str, dbname: str):
    session = aiohttp.ClientSession()
    tag, name = await get_lastest_release()

    req = await session.get(GEMOJI_JSON_DB_URL.format(tag=tag))

    data = await req.json()

    path: str = os.path.join(path, dbname)

    async with aiofiles.open(path, "w", encoding="utf-8", errors="ignore") as file:
        await file.write("### This is a generated file.\n")
        await file.write("### Do not edit this file.\n")
        await file.write(f"### Date: {datetime.now().isoformat()[:-7]}\n")
        await file.write(f"### This file is based on {name}.\n")
        await file.write("\n")
        await file.write("from collections import namedtuple\n")
        await file.write("\n")
        await file.write('Emoji = namedtuple("Emoji", ["aliases", "emoji", "tags", "category", "unicode_version"])\n')
        await file.write("\n")
        await file.write("EMOJI_DB = [\n")

        for emoji in data:
            if "emoji" in emoji:
                await file.write(
                    '    Emoji({aliases}, "{emoji}", {tags}, "{category}", "{unicode_version}"),\n'.format(
                        **{
                            "aliases": emoji["aliases"],
                            "emoji": emoji["emoji"],
                            "tags": emoji["tags"],
                            "category": emoji["category"],
                            "unicode_version": emoji["unicode_version"],
                        },
                    ),
                )

        await file.write("]\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generates the Emoji database.")
    parser.add_argument("--dir", default=".", help="Database location")
    parser.add_argument("--dbname", default="db.py", help="Database location")
    args = parser.parse_args()

    asyncio.run(generate(args.dir, args.dbname))
